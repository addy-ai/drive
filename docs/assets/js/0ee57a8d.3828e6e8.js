"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7242],{4882:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(5893),i=s(1151);const r={},o="HuggingFace",l={id:"api/llmtools/huggingFace",title:"HuggingFace",description:"Description: The HuggingFace class serves as a wrapper for interacting with the Hugging Face APIs for operations such as model inference, repository creation, file management, and validity checks for API tokens and Hugging Face hubs.",source:"@site/docs/api/llmtools/huggingFace.md",sourceDirName:"api/llmtools",slug:"/api/llmtools/huggingFace",permalink:"/docs/api/llmtools/huggingFace",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/llmtools/huggingFace.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Training",permalink:"/docs/api/llmtools/train"},next:{title:"Heroku",permalink:"/docs/api/llmtools/heroku"}},d={},c=[{value:"Method: <code>tokenIsValid</code>",id:"method-tokenisvalid",level:3},{value:"Method: <code>hubExists</code>",id:"method-hubexists",level:3},{value:"Method: <code>questionAnswering</code>",id:"method-questionanswering",level:3},{value:"Method: <code>createRepo</code>",id:"method-createrepo",level:3},{value:"Method: <code>uploadFile</code>",id:"method-uploadfile",level:3},{value:"Method: <code>deleteFiles</code>",id:"method-deletefiles",level:3}];function h(e){const n={code:"code",h1:"h1",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"huggingface",children:"HuggingFace"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": The ",(0,t.jsx)(n.code,{children:"HuggingFace"})," class serves as a wrapper for interacting with the Hugging Face APIs for operations such as model inference, repository creation, file management, and validity checks for API tokens and Hugging Face hubs."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"method-tokenisvalid",children:["Method: ",(0,t.jsx)(n.code,{children:"tokenIsValid"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": A boolean indicating whether the provided API token is valid."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This method checks the validity of the Hugging Face API token by attempting to list the available models."}),"\n",(0,t.jsxs)(n.li,{children:["If the token is valid, the method returns ",(0,t.jsx)(n.code,{children:"true"}),", otherwise it returns ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Catches and logs any errors during the validation process."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": Verify the Hugging Face API token is valid before proceeding with further API interactions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const hf = new HuggingFace('your-token');\nconst isValid = await hf.tokenIsValid();\nif (isValid) {\n  console.log('Token is valid.');\n} else {\n  console.log('Invalid token, please check your credentials.');\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),": None."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"method-hubexists",children:["Method: ",(0,t.jsx)(n.code,{children:"hubExists"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": A boolean indicating whether the target Hugging Face hub exists."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This method verifies the existence of a Hugging Face hub by listing models."}),"\n",(0,t.jsxs)(n.li,{children:["If the hub exists, it returns ",(0,t.jsx)(n.code,{children:"true"}),", otherwise it returns ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Similar in functionality to ",(0,t.jsx)(n.code,{children:"tokenIsValid()"})," and may be subject to change to better reflect its intended purpose."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": Check if the Hugging Face hub exists."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const hf = new HuggingFace('your-token');\nconst exists = await hf.hubExists();\nif (exists) {\n  console.log('Hub exists.');\n} else {\n  console.log('Hub does not exist.');\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),": None."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"method-questionanswering",children:["Method: ",(0,t.jsx)(n.code,{children:"questionAnswering"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": The method returns the result of a question answering model hosted on the Hugging Face platform."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Calls upon a pre-trained question answering model, specified by the user, to process the provided inputs."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": Use a question answering model to obtain answers based on provided input."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const hf = new HuggingFace(\'your-token\');\nconst model = "bert-base-uncased";\nconst inputs = {\n  question: "What is Hugging Face?",\n  context: "Hugging Face is a social AI company and platform for ML models."\n};\nconst result = await hf.questionAnswering(model, inputs);\nconsole.log(result);\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter Name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Accepted Values/Data Types"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"model"}),(0,t.jsx)(n.td,{children:"The identifier for the Hugging Face question answering model."}),(0,t.jsx)(n.td,{children:"String"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"inputs"}),(0,t.jsx)(n.td,{children:"The inputs containing the question and context for the model."}),(0,t.jsxs)(n.td,{children:["Object ",(0,t.jsx)(n.code,{children:"{ question, context }"})]})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"method-createrepo",children:["Method: ",(0,t.jsx)(n.code,{children:"createRepo"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": The response from the Hugging Face API upon the creation of a new repository."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates a new repository or a folder in the Hugging Face hub to store models or datasets."}),"\n",(0,t.jsx)(n.li,{children:"Accepts a repository path and a type to specifically create a 'model' type repository if specified."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": Create a new model repository at the specified path."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const hf = new HuggingFace(\'your-token\');\nconst repoPath = "your-username/your-new-model";\nconst repoType = "model";\nconst response = await hf.createRepo(repoPath, repoType);\nconsole.log(response);\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter Name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Accepted Values/Data Types"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"repoPath"}),(0,t.jsx)(n.td,{children:"The path where the new repository will reside on the hub."}),(0,t.jsx)(n.td,{children:"String"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"type"}),(0,t.jsx)(n.td,{children:"The type of repository to create (optionally specify 'model')."}),(0,t.jsx)(n.td,{children:"String"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"method-uploadfile",children:["Method: ",(0,t.jsx)(n.code,{children:"uploadFile"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": The response from the Hugging Face API upon successful file upload."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Uploads a file (e.g., a model file) to a specific repository on the Hugging Face hub."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": Upload a model file to a specified repository."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const hf = new HuggingFace(\'your-token\');\nconst repoPath = "your-username/your-model";\nconst filePath = "pytorch_model.bin";\nconst blob = new Blob([...]); // blob containing file data\nconst response = await hf.uploadFile(repoPath, filePath, blob);\nconsole.log(response);\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter Name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Accepted Values/Data Types"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"repoPath"}),(0,t.jsx)(n.td,{children:"The repository path to upload the file to."}),(0,t.jsx)(n.td,{children:"String"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"filePath"}),(0,t.jsx)(n.td,{children:"The destination file path on the hub."}),(0,t.jsx)(n.td,{children:"String"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"blob"}),(0,t.jsx)(n.td,{children:"The file content to be uploaded."}),(0,t.jsx)(n.td,{children:"Blob"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"method-deletefiles",children:["Method: ",(0,t.jsx)(n.code,{children:"deleteFiles"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": The response from the Hugging Face API after attempting to delete the specified files."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Deletes one or more files within a repository or space on the Hugging Face hub."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": Delete specific files in a model repository."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const hf = new HuggingFace(\'your-token\');\nconst type = "model";\nconst name = "your-username/your-model";\nconst paths = ["file1.bin", "file2.bin"];\nconst response = await hf.deleteFiles(type, name, paths);\nconsole.log(response);\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter Name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Accepted Values/Data Types"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"type"}),(0,t.jsx)(n.td,{children:"The type of the target to delete files from."}),(0,t.jsx)(n.td,{children:"String"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"name"}),(0,t.jsx)(n.td,{children:"The path to the repo or space where the files are located."}),(0,t.jsx)(n.td,{children:"String"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"paths"}),(0,t.jsx)(n.td,{children:"An array of strings representing the file paths to delete."}),(0,t.jsx)(n.td,{children:"Array of String"})]})]})]}),"\n",(0,t.jsx)(n.hr,{})]})}function a(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var t=s(7294);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);