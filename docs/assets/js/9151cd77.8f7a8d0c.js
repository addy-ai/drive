"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1778],{5245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var i=t(5893),r=t(1151);const s={},a="Training",d={id:"api/llmtools/train",title:"Training",description:"Description: The Train class is designed for training language models using various data sources, including CSV files, service responses, and structured data. It handles the preparation of training data and interacts with a training API to finetune models on the Hugging Face platform.",source:"@site/docs/api/llmtools/train.md",sourceDirName:"api/llmtools",slug:"/api/llmtools/train",permalink:"/docs/api/llmtools/train",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/llmtools/train.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"App Verification",permalink:"/docs/api/connectors/Security/verification"},next:{title:"HuggingFace",permalink:"/docs/api/llmtools/huggingFace"}},o={},c=[{value:"Method: <code>init</code>",id:"method-init",level:3},{value:"Method: <code>trainModel</code>",id:"method-trainmodel",level:3},{value:"Method: <code>prepareData</code>",id:"method-preparedata",level:3},{value:"Method: <code>getData</code>",id:"method-getdata",level:3}];function l(e){const n={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"training",children:"Training"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": The ",(0,i.jsx)(n.code,{children:"Train"})," class is designed for training language models using various data sources, including CSV files, service responses, and structured data. It handles the preparation of training data and interacts with a training API to finetune models on the Hugging Face platform."]}),"\n",(0,i.jsxs)(n.h3,{id:"method-init",children:["Method: ",(0,i.jsx)(n.code,{children:"init"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": An instance of the ",(0,i.jsx)(n.code,{children:"Train"})," class after it has been initialized with the provided configuration."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This static method initializes the ",(0,i.jsx)(n.code,{children:"Train"})," class with the given configuration object."]}),"\n",(0,i.jsx)(n.li,{children:"It returns a new instance of the class once it has prepared the necessary training data."}),"\n",(0,i.jsx)(n.li,{children:"It prints the 'DriveTrain init()' message if the verbose option is set to true."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),": To initialize a ",(0,i.jsx)(n.code,{children:"Train"})," instance using a configuration object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const config = { verbose: true, /*...otherProps*/ };\nconst trainInstance = await Train.init(config);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Accepted Values/Data Types"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"config"}),(0,i.jsx)(n.td,{children:"An object containing configuration properties for the class instance."}),(0,i.jsx)(n.td,{children:"Object"})]})})]}),"\n",(0,i.jsxs)(n.h3,{id:"method-trainmodel",children:["Method: ",(0,i.jsx)(n.code,{children:"trainModel"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": A promise that resolves with the model training response."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Trains a model with the prepared data and Hugging Face API information."}),"\n",(0,i.jsx)(n.li,{children:"Communicates with a training server API to initiate the finetuning process."}),"\n",(0,i.jsx)(n.li,{children:"Handles verbose logs if enabled."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),": To train a model with the prepared data and provided Hugging Face information."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const huggingfaceInfo = {\n  baseModel: 'model-name',\n  hfToken: 'your-huggingface-token',\n  deployToHf: true,\n  trainedModel: 'username/finetuned-model-name'\n};\nconst trainingResponse = await trainInstance.trainModel(huggingfaceInfo);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Accepted Values/Data Types"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"huggingfaceInfo"}),(0,i.jsx)(n.td,{children:"An object containing information required for the Hugging Face API."}),(0,i.jsx)(n.td,{children:"Object"})]})})]}),"\n",(0,i.jsxs)(n.h3,{id:"method-preparedata",children:["Method: ",(0,i.jsx)(n.code,{children:"prepareData"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": A promise that resolves with an array of training data objects."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prepares training data by retrieving input and output data from various sources."}),"\n",(0,i.jsx)(n.li,{children:"Maps input data to corresponding output data to form training pairs."}),"\n",(0,i.jsx)(n.li,{children:"Logs the preparation process if verbose mode is enabled."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),": To prepare the training data internally within the instance."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const trainingData = await trainInstance.prepareData();\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),": This method does not require external parameters as it utilizes the instance properties."]}),"\n",(0,i.jsxs)(n.h3,{id:"method-getdata",children:["Method: ",(0,i.jsx)(n.code,{children:"getData"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": A promise that resolves with the data retrieved from the specified label (input or output)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Retrieves data based on the label, which indicates whether it's input or output data."}),"\n",(0,i.jsx)(n.li,{children:"Manages retrieval from a URL, service, or directly from provided data."}),"\n",(0,i.jsx)(n.li,{children:"Can log the process if verbose option is set to true."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),": To get data from the specified label within the class instance."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const inputData = await trainInstance.getData('input');\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Accepted Values/Data Types"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lbl"}),(0,i.jsx)(n.td,{children:"A label indicating what data to retrieve ('input' or 'output')."}),(0,i.jsx)(n.td,{children:"String"})]})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>a});var i=t(7294);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);