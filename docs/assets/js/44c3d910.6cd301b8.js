"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4016],{4361:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(5893),i=t(1151);const s={},r="DriveChatbot",a={id:"api/llmtools/chatbot",title:"DriveChatbot",description:"The Chatbot returns Async Promises.",source:"@site/docs/api/llmtools/chatbot.md",sourceDirName:"api/llmtools",slug:"/api/llmtools/chatbot",permalink:"/docs/api/llmtools/chatbot",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/llmtools/chatbot.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Heroku",permalink:"/docs/api/llmtools/heroku"},next:{title:"Contributing",permalink:"/docs/overview/contributors"}},l={},c=[{value:"Chatbot Example Script",id:"chatbot-example-script",level:3},{value:"Chatbot Properties",id:"chatbot-properties",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"drivechatbot",children:"DriveChatbot"}),"\n",(0,o.jsx)(n.p,{children:"The Chatbot returns Async Promises."}),"\n",(0,o.jsxs)(n.p,{children:["Chatbot's minimal initalization is like so:\n",(0,o.jsx)(n.code,{children:"chatbot = new langdrive.DriveChatbot({model_config:{HuggingFaceAPIKey:<KEY>}})"}),"\nor like so:\n",(0,o.jsx)(n.code,{children:"chatbot = new langdrive.Chatbot({model_config:{openAIApiKey:<KEY>}})"})]}),"\n",(0,o.jsx)(n.h3,{id:"chatbot-example-script",children:"Chatbot Example Script"}),"\n",(0,o.jsx)(n.p,{children:"Get started with a sample script by created the following files:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm install langdrive dotenv\nnode test.js\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".env"})," File:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"OPENAI_API_KEY=<YOUR_KEY_HERE>\nGOOGLE_DESKTOP_CLIENT_KEYFILE_PATH=<YOUR_KEY_HERE>\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"test.js"})," File:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'require("dotenv").config();\nconst langdrive = require("langdrive");\n\n// LangDrive returns promises\n(async()=>{\n  // To initialize Langdrive, give it a model to use and any associated config information.\n  // Here we select openAi and pass it an API key (hidden behind .env)\n  let chatbot = await new langdrive.DriveChatbot({\n    verbose: true,\n    drive: {\n      verbose: false,\n      ...(!GOOGLE_DESKTOP_KEYFILE_PATH\n        ? {}\n        : {\n            server: {\n              embed_from_folder: "chatbot",\n              embed_to_folder: "chatbot/embeddings",\n              scopes: ["https://www.googleapis.com/auth/drive"],\n              // serviceKeyFile: __dirname + "/../" + GOOGLE_SERVICE_KEYFILE_PATH\n              // OR\n              desktopKeyFile: __dirname + GOOGLE_DESKTOP_KEYFILE_PATH\n              // ( Alternately:) desktopKeyFileContents: GOOGLE_DESKTOP_CLIENT_KEYFILE_CONTENTS\n              // OR\n              // desktopTokenFile: GOOGLE_DESKTOP_CLIENT_TOKEN_PATH:\n              // ( Alternately:) desktopTokenFileContents: GOOGLE_DESKTOP_CLIENT_TOKEN_CONTENTS\n              // OR\n              //client_id: GOOGLE_DESKTOP_CLIENT_ID, // and\n              //client_secret: GOOGLE_SERVICE_CLIENT_SECRET //and\n              //client_redirect_uri: xyz\n            }\n          })\n    },\n    model: {\n      service: !!HUGGINGFACE_API_KEY ? "huggingFace" : "chatOpenAi",\n      model_config: !!HUGGINGFACE_API_KEY\n        ? {\n            model_id: "meta-llama/Llama-2-30b",\n            huggingFaceApiKey: HUGGINGFACE_API_KEY\n          }\n        : {\n            modelName: "gpt-3.5-turbo", // default = "text-davinci-003"\n            // maxTokens: 256, // default = 256\n            openAIApiKey: OPENAI_API_KEY,\n            temperature: 0.9\n          }\n    },\n    agent: {\n      type: "chat-conversational-react-description",\n      memory_length: 2,\n      vector_length: 2,\n      verbose: false,\n      tools: [],\n      agent_config: {}\n      // prefix\n      // suffix\n    }\n  });\n  // LangDrive returns a promise, so let\'s await those.\n  let prompt = "My name is Michael, What can you do for me.";\n  console.log("> " , await chatbot.sendMessage(prompt));\n\n  prompt = "What can you do for me in google drive?";\n  console.log("> " , await chatbot.sendMessage(prompt));\n\n  prompt = "What is my name?";\n  console.log("> " , await chatbot.sendMessage(prompt));\n})()\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can also clone the repo and get started with our demo chatbot"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Download Repo"}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"npm install"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Create Google OAuth2 Keys"}),"\n",(0,o.jsx)(n.li,{children:".env.examples -> .env + Keys"}),"\n",(0,o.jsx)(n.li,{children:"npm run start"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"chatbot-properties",children:"Chatbot Properties"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"props"})," used in DriveChatbot(",(0,o.jsx)(n.code,{children:"props"}),") configure your chatbot. Available settings and their default values are shown below."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var o=t(7294);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);